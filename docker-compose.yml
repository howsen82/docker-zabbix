# Zabbix with Let's Encrypt Using Docker Compose

# Change variables in the `.env` to meet your requirements.

# Create networks for your services before deploying the configuration using the commands
# docker network create traefik-network
# docker network create zabbix-network

# Deploy Zabbix using Docker Compose
# docker-compose -f docker-compose.yml -p zabbix up -d

version: '3.9'

services:
  zabbix:
    container_name: zabbix
    image: ${ZABBIX_SERVER_IMAGE_TAG}
    hostname: zabbix
    environment:
      - DB_SERVER_HOST=postgres
      - DB_SERVER_PORT=5432
      - POSTGRES_DB=${ZABBIX_DB_NAME}
      - POSTGRES_USER=${ZABBIX_DB_USER}
      - POSTGRES_PASSWORD=${ZABBIX_DB_PASSWORD}
    networks:
      - zabbix-network
      - traefik-network
    restart: unless-stopped
    healthcheck:
      test: grep -qr "zabbix_server" /proc/*/status || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 90s
    labels:
      - traefik.enable=true
      - traefik.http.routers.zabbix-server.rule=Host(`${ZABBIX_SERVER_HOSTNAME}`)
      - traefik.http.routers.zabbix-server.service=zabbix
      - traefik.http.routers.zabbix-server.entrypoints=zabbix
      - traefik.http.services.zabbix-server.loadbalancer.server.port=10051
      - traefik.http.routers.zabbix-server.tls.certresolver=letsencrypt
      - traefik.docker.network=traefik-network
    depends_on:
      postgres:
        condition: service_healthy

  zabbix-dashboard:
    container_name: zabbix-dashboard
    image: ${ZABBIX_WEB_IMAGE_TAG}
    environment:
      - DB_SERVER_HOST=postgres
      - DB_SERVER_PORT=5432
      - POSTGRES_DB=${ZABBIX_DB_NAME}
      - POSTGRES_USER=${ZABBIX_DB_USER}
      - POSTGRES_PASSWORD=${ZABBIX_DB_PASSWORD}
      - ZBX_SERVER_HOST=zabbix
      - PHP_TZ=${ZABBIX_TIMEZONE}
    networks:
      - zabbix-network
      - traefik-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 90s
    depends_on:
      postgres:
        condition: service_healthy
      zabbix:
        condition: service_healthy
      traefik:
        condition: service_healthy

  agent:
    container_name: agent
    image: ${ZABBIX_AGENT_IMAGE_TAG}
    environment:
      - ZBX_HOSTNAME=zabbix
      - ZBX_SERVER_HOST=zabbix
    networks:
      - zabbix-network
    restart: unless-stopped
    depends_on:
      - postgres
      - zabbix

  traefik:
    container_name: traefik
    image: ${TRAEFIK_IMAGE_TAG}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - traefik-certificates:/etc/traefik/acme
    ports:
      - 83:80
      - 443:443
      - 10051:10051
    networks:
      - traefik-network
    restart: unless-stopped
    command:
      - "--log.level=${TRAEFIK_LOG_LEVEL}"
      - "--accesslog=true"
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--ping=true"
      - "--ping.entrypoint=ping"
      - "--entryPoints.ping.address=:8082"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      - "--entryPoints.zabbix.address=:10051"
      - "--providers.docker=true"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.exposedByDefault=false"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${TRAEFIK_ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/etc/traefik/acme/acme.json"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
      - "--global.checkNewVersion=true"
      - "--global.sendAnonymousUsage=false"
    healthcheck:
      test: ["CMD", "wget", "http://localhost:8082/ping","--spider"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    labels:
      - traefik.enable=true
      - "traefik.http.routers.dashboard.rule=Host(`${TRAEFIK_HOSTNAME}`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.services.dashboard.loadbalancer.server.port=8080"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.services.dashboard.loadbalancer.passhostheader=true"
      - "traefik.http.routers.dashboard.middlewares=authtraefik"
      - "traefik.http.middlewares.authtraefik.basicauth.users=${TRAEFIK_BASIC_AUTH}"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
  
  postgres:
    container_name: postgres
    image: ${POSTGRES_IMAGE_TAG}
    environment:
      - POSTGRES_DB=${ZABBIX_DB_NAME}
      - POSTGRES_USER=${ZABBIX_DB_USER}
      - POSTGRES_PASSWORD=${ZABBIX_DB_PASSWORD}
    volumes:
      - zabbix-postgres:/var/lib/postgresql/data
    networks:
      - zabbix-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -h 127.0.0.1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s

  backup:
    container_name: backup
    image: ${POSTGRES_IMAGE_TAG}
    environment:
      - ZABBIX_DB_NAME=${ZABBIX_DB_NAME}
      - ZABBIX_DB_USER=${ZABBIX_DB_USER}
      - PGPASSWORD=${ZABBIX_DB_PASSWORD}
      - ZABBIX_BACKUP_INIT_SLEEP=${ZABBIX_BACKUP_INIT_SLEEP}
      - ZABBIX_BACKUP_INTERVAL=${ZABBIX_BACKUP_INTERVAL}
      - ZABBIX_POSTGRES_BACKUP_PRUNE_DAYS=${ZABBIX_POSTGRES_BACKUP_PRUNE_DAYS}
      - ZABBIX_POSTGRES_BACKUPS_PATH=${POSTGRES_BACKUPS_PATH}
      - ZABBIX_POSTGRES_BACKUP_NAME=${ZABBIX_POSTGRES_BACKUP_NAME}
    volumes:
      - zabbix-postgres-backup:/var/lib/postgresql/data
      - zabbix-database-backups:${POSTGRES_BACKUPS_PATH}
    networks:
      - zabbix-network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  zabbix-postgres:
  zabbix-postgres-backup:
  zabbix-database-backups:
  traefik-certificates:

networks:
  zabbix-network:
    external:
      name: zabbix-network
  traefik-network:
    external:
      name: traefik-network